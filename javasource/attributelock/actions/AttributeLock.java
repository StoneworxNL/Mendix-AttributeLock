// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package attributelock.actions;

import java.util.*;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class AttributeLock extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject NewObject;

	public AttributeLock(IContext context, IMendixObject NewObject)
	{
		super(context);
		this.NewObject = NewObject;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext context = getContext();

        // Retrieve the "ALLOWED_TO_CHANGE" attribute value
        // If it's empty or null, changes are not allowed
        String allowedToChange = (String) Optional.ofNullable(NewObject.getValue(context, ALLOWED_TO_CHANGE))
                .orElse("");

        // if "ALLOWED_TO_CHANGE" contains a single * all changes are allowed.
        if (allowedToChange.equals("*")){
            return true;
        }

        // If no attributes are allowed to change return false
        if (allowedToChange.isEmpty()) {
            logMessage(NewObject, "No allowedToChange members provided", context);
            return false;
        }

        // if there are no changes then the change is valid, except for new objects
        IMendixObject.ObjectState objectState = NewObject.getState();
        if (!NewObject.isChanged() && !objectState.name().equals("INSTANTIATED") ) {
            return true;
        }

        // Create a set of allowed members by splitting the "allowedToChange" value by ";"
        Set<String> membersAllowedToChange = new HashSet<>(Arrays.asList(allowedToChange.split(";")));

        // add the ALLOWED_TO_CHANGE itself to the allowed list, since it is managed by this action
        membersAllowedToChange.add(ALLOWED_TO_CHANGE);

        //Make sure that the allowed attributes to change are not stored.
        clearAllowedToChangeAttribute(context);

        return isValidChange(membersAllowedToChange, NewObject, context);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "AttributeLock";
	}

	// BEGIN EXTRA CODE
	
	private static final String ALLOWED_TO_CHANGE = "AllowedToChange";

    private void clearAllowedToChangeAttribute(IContext context) throws CoreException {
        Map<String, String> map = new HashMap<>();
        map.put(ALLOWED_TO_CHANGE, "");
        Core.change(context, NewObject, map);
    }

    private boolean isValidChange(Set<String> membersAllowedToChange, IMendixObject newObject, IContext context) {

        // check if the changed members are in the list of allowed attributes to change.
        boolean hasInvalidChange = newObject.getChangedMembers(context)
                .stream()
                .map(IMendixObjectMember::getName)
                .anyMatch(memberName -> {
                    if (!membersAllowedToChange.contains(memberName)) {
                        logMessage(newObject, memberName, context);
                        return true; // Return true if there is an invalid change
                    }
                    return false; // Return false if there is no invalid change
                });

        return !hasInvalidChange;
    }

    private void logMessage(IMendixObject iMendixObject, String message, IContext context){
        String username = context.getSession().getUserName();

        Core.getLogger("InvalidMemberChange")
                .error(String.format("Locked: %s / %s / %s",
                        iMendixObject.getMetaObject().getName(), message, username));
    }

	// END EXTRA CODE
}
